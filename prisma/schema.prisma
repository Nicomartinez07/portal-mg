generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDIENTE
  AUTORIZADO
  RECHAZADO
  COMPLETADO
}

enum OrderType {
  PRE_AUTORIZACION
  RECLAMO
  SERVICIO
}

enum InternalStatus {
  PENDIENTE_RECLAMO
  RECLAMO_EN_ORIGEN
  APROBADO_EN_ORIGEN
  RECHAZADO_EN_ORIGEN
  CARGADO
  NO_RECLAMABLE
}

// ============== MODELOS ==================
model Customer {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String
  phone      String
  address    String
  state      String
  city       String
  orders     Order[]
  warranties Warranty[]
}

model Company {
  id           Int        @id @default(autoincrement())
  name         String
  address      String
  state        String
  city         String?
  phone1       String?
  phone2       String?
  email        String?
  companyType  String
  manager      String?
  users        User[]
  parts        Part[]
  warranties   Warranty[]
  orders       Order[]
  vehicles     Vehicle[]   
}


model User {
  id    Int    @id @default(autoincrement())
  username     String
  email        String    @unique
  password     String
  companyId    Int
  company      Company   @relation(fields: [companyId], references: [id])
  roles        UserRole[]
  notifications Boolean  @default(false)
  warranties   Warranty[]
  orders       Order[]
}

model Role {
  id    Int        @id 
  name  String     @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
  @@id([userId, roleId])
}

model Vehicle {
  id                Int       @id @default(autoincrement())
  date              DateTime
  vin               String    @unique
  brand             String
  model             String
  engineNumber      String?
  type              String?
  year              Int?
  certificateNumber String    @unique
  saleDate          DateTime?
  importDate        DateTime?
  blocked           Boolean?
  licensePlate      String
  warranty          Warranty?
  orders            Order[]
  companyId         Int?
  company           Company?   @relation(fields: [companyId], references: [id])
}


model PartContact {
  id          Int     @id @default(autoincrement())
  contactName String
  address     String?
  state       String?
  city        String?
  phone1      String?
  phone2      String?
  email       String?
  parts       Part[]
}

model Part {
  id          Int     @id @default(autoincrement())
  loadDate    DateTime?
  companyId   Int
  company     Company @relation(fields: [companyId], references: [id])
  code        String  @unique
  description String
  model       String?
  stock       Int?
  salePrice   Float?
  contactId   Int
  contact     PartContact @relation(fields: [contactId], references: [id])
  taskParts   OrderTaskPart[]
}

model Warranty {
  id             Int      @id @default(autoincrement())
  activationDate DateTime
  blocked   Boolean?  
  vehicleVin     String   @unique
  vehicle        Vehicle  @relation(fields: [vehicleVin], references: [vin])
  companyId      Int
  company        Company  @relation(fields: [companyId], references: [id])
  userId         Int?
  user           User?     @relation(fields: [userId], references: [id])
  customerId     Int
  customer       Customer @relation(fields: [customerId], references: [id])
}

// =============== ORDENES =================
model Order {
  id                     Int        @id @default(autoincrement())
  orderNumber            Int @default(99999)
  type                   OrderType
  creationDate           DateTime
  customerId             Int
  customer               Customer   @relation(fields: [customerId], references: [id])
  vehicleVin             String
  vehicle                Vehicle    @relation(fields: [vehicleVin], references: [vin])
  companyId              Int
  company                Company    @relation(fields: [companyId], references: [id])
  userId                 Int?
  user                   User?     @relation(fields: [userId], references: [id])
  status                 OrderStatus
  internalStatus         InternalStatus?
  actualMileage          Int
  diagnosis              String?
  additionalObservations String?
  tasks                  OrderTask[]
  photos                 OrderPhoto[]
  statusHistory          OrderStatusHistory[]
}

model OrderTask {
  id          Int            @id @default(autoincrement())
  orderId     Int
  order       Order          @relation(fields: [orderId], references: [id])
  description String
  hoursCount  Int
  parts       OrderTaskPart[]
}

model OrderTaskPart {
  id          Int      @id @default(autoincrement())
  orderTaskId Int
  partId      Int
  quantity    Int
  description String?
  orderTask   OrderTask @relation(fields: [orderTaskId], references: [id])
  part        Part      @relation(fields: [partId], references: [id])
}

model OrderPhoto {
  id      Int    @id @default(autoincrement())
  orderId Int
  order   Order  @relation(fields: [orderId], references: [id])
  type    String // ej: "license_plate", "vin_plate", "odometer", "extra"
  url     String
}

model OrderStatusHistory {
  id        Int          @id @default(autoincrement())
  orderId   Int
  order     Order        @relation(fields: [orderId], references: [id])
  status    OrderStatus
  changedAt DateTime     @default(now())
}